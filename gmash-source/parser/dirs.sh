# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
GMASH_DIRS_ARGR=''
gmash_parser_dirs() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_DIRS_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[hv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_DIRS_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-h'|'--help')
				gmash_dirs_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_DIRS_VERSION}"
				exit 0 ;;
			--)
				while [ $# -gt 0 ]; do
					GMASH_DIRS_ARGR="${GMASH_DIRS_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				case $1 in 'prefix'|'same'|'separate'|'squash') ;;
					*) set "notcmd" "$1"; break
				esac
				while [ $# -gt 0 ]; do
					GMASH_DIRS_ARGR="${GMASH_DIRS_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_dirs_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash dirs <sub-command> [[args]...]
  
High level path/file manipulation and analysis.
  
Sub-commands:
  prefix                                Add a prefix to each top-level file in a directory.
  same                                  Get a diff of 2 directories.
  separate                              Separate a directory into its constituent parts.
  squash                                Squash empty paths in a directory.
  
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
export GMASH_DIRS_PREFIX_PREFIX=''
export GMASH_DIRS_PREFIX_PATH=''
GMASH_DIRS_PREFIX_ARGR=''
gmash_parser_dirs_prefix() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_DIRS_PREFIX_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--prefix' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --prefix"
			esac
			case '--path' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --path"
			esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[pP]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[hv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_DIRS_PREFIX_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-p'|'--prefix')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_DIRS_PREFIX_PREFIX="$OPTARG"
				shift ;;
			'-P'|'--path')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_DIRS_PREFIX_PATH="$OPTARG"
				shift ;;
			'-h'|'--help')
				gmash_dirs_prefix_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_DIRS_PREFIX_VERSION}"
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					GMASH_DIRS_PREFIX_ARGR="${GMASH_DIRS_PREFIX_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				GMASH_DIRS_PREFIX_ARGR="${GMASH_DIRS_PREFIX_ARGR} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_dirs_prefix_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash dirs prefix --p <prefix> --P [fileOrFolder]
  
Add a prefix to each top-level file in a directory.
  
Parameters:
  -p,     --prefix <prefix>             Prefix to add.
  -P,     --path [fileOrFolder]         Path to a file or directory. If given a file, only the single file is prefixed.
  
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
export GMASH_DIRS_SAME_PATH=''
export GMASH_DIRS_SAME_TGTPATH=''
GMASH_DIRS_SAME_ARGR=''
gmash_parser_dirs_same() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_DIRS_SAME_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--path' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --path"
			esac
			case '--tgt-path' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --tgt-path"
			esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[pP]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[hv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_DIRS_SAME_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-p'|'--path')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_DIRS_SAME_PATH="$OPTARG"
				shift ;;
			'-P'|'--tgt-path')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_DIRS_SAME_TGTPATH="$OPTARG"
				shift ;;
			'-h'|'--help')
				gmash_dirs_same_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_DIRS_SAME_VERSION}"
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					GMASH_DIRS_SAME_ARGR="${GMASH_DIRS_SAME_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				GMASH_DIRS_SAME_ARGR="${GMASH_DIRS_SAME_ARGR} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_dirs_same_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash dirs same -p <srcPath> -P <tgtPath>
  
Get a diff of 2 directories.
  
Parameters:
  -p,     --path <srcPath>              Source path.
  -P,     --tgt-path <tgtPath>          Target path.
  
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
export GMASH_DIRS_SEPARATE_PATH=''
export GMASH_DIRS_SEPARATE_NOEXTENSION=''
GMASH_DIRS_SEPARATE_ARGR=''
gmash_parser_dirs_separate() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_DIRS_SEPARATE_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--path' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --path"
			esac
			case '--no-extension' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --no-extension"
			esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[pn]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[hv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_DIRS_SEPARATE_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-p'|'--path')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_DIRS_SEPARATE_PATH="$OPTARG"
				shift ;;
			'-n'|'--no-extension')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_DIRS_SEPARATE_NOEXTENSION="$OPTARG"
				shift ;;
			'-h'|'--help')
				gmash_dirs_separate_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_DIRS_SEPARATE_VERSION}"
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					GMASH_DIRS_SEPARATE_ARGR="${GMASH_DIRS_SEPARATE_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				GMASH_DIRS_SEPARATE_ARGR="${GMASH_DIRS_SEPARATE_ARGR} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_dirs_separate_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash dirs separate [path]
  
Separate each top-level file into its own folder of the same name.
  
Parameters:
  -p,     --path [path]                 Path to separate files from. Defaults to current.
  
Options:
  -n,     --no-extension                Separate files with the same base name, ignoring extensions.
  
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
export GMASH_DIRS_SQUASH_PATH=''
export GMASH_DIRS_SQUASH_DEPTH=''
GMASH_DIRS_SQUASH_ARGR=''
gmash_parser_dirs_squash() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_DIRS_SQUASH_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--path' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --path"
			esac
			case '--depth' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --depth"
			esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[pd]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[hv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_DIRS_SQUASH_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-p'|'--path')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_DIRS_SQUASH_PATH="$OPTARG"
				shift ;;
			'-d'|'--depth')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_DIRS_SQUASH_DEPTH="$OPTARG"
				shift ;;
			'-h'|'--help')
				gmash_dirs_squash_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_DIRS_SQUASH_VERSION}"
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					GMASH_DIRS_SQUASH_ARGR="${GMASH_DIRS_SQUASH_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				GMASH_DIRS_SQUASH_ARGR="${GMASH_DIRS_SQUASH_ARGR} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_dirs_squash_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash dirs squash [path]
  
Squash empty directories in the specified path.
  
Parameters:
  -p,     --path [path]                 Target path. Defaults to current.
  -d,     --depth [depth]               Depth of directories to squash. Defaults to 1.
  
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
