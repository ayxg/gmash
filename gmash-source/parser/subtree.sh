# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
GMASH_SUBTREE_ARGR=''
gmash_parser_subtree() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_SUBTREE_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[hv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_SUBTREE_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-h'|'--help')
				gmash_subtree_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_SUBTREE_VERSION}"
				exit 0 ;;
			--)
				while [ $# -gt 0 ]; do
					GMASH_SUBTREE_ARGR="${GMASH_SUBTREE_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				case $1 in 'add'|'pull') ;;
					*) set "notcmd" "$1"; break
				esac
				while [ $# -gt 0 ]; do
					GMASH_SUBTREE_ARGR="${GMASH_SUBTREE_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_subtree_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash subtree <sub-command> [[args]...]
 
Call [main-cmd] [sub-cmd] --help for details of each sub-command.
 
Sub-Commands:
  add                                   Add and merge a new or existing repo as a subtree to a parent monorepo.
  pull                                  Pull subtree changes to monorepo.
 
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
export GMASH_SUBTREE_NEW_PREFIX=''
export GMASH_SUBTREE_NEW_REMOTE=''
export GMASH_SUBTREE_NEW_URL=''
export GMASH_SUBTREE_NEW_BR=''
export GMASH_SUBTREE_NEW_SQUASH=''
export GMASH_SUBTREE_NEW_NEW=''
GMASH_SUBTREE_NEW_ARGR=''
gmash_parser_subtree_new() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_SUBTREE_NEW_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--prefix' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --prefix"
			esac
			case '--remote' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --remote"
			esac
			case '--url' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --url"
			esac
			case '--branch' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --branch"
			esac
			case '--squash' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --squash"
			esac
			case '--new' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --new"
			esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[prlb]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[snhv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_SUBTREE_NEW_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-p'|'--prefix')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_SUBTREE_NEW_PREFIX="$OPTARG"
				shift ;;
			'-r'|'--remote')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_SUBTREE_NEW_REMOTE="$OPTARG"
				shift ;;
			'-l'|'--url')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_SUBTREE_NEW_URL="$OPTARG"
				shift ;;
			'-b'|'--branch')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_SUBTREE_NEW_BR="$OPTARG"
				shift ;;
			'-s'|'--squash')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				export GMASH_SUBTREE_NEW_SQUASH="$OPTARG"
				;;
			'-n'|'--new')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				export GMASH_SUBTREE_NEW_NEW="$OPTARG"
				;;
			'-h'|'--help')
				gmash_subtree_new_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_SUBTREE_NEW_VERSION}"
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					GMASH_SUBTREE_NEW_ARGR="${GMASH_SUBTREE_NEW_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				GMASH_SUBTREE_NEW_ARGR="${GMASH_SUBTREE_NEW_ARGR} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_subtree_new_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash subtree add <-p <subtreePrefixPath>> <-r <remoteAlias>> <-l <remoteUrl>> [-b <subtreeBranch>]
 
Properly add and merge a new or existing repo as a subtree to a parent monorepo.
 
Parameters:
  -p,     --prefix <subtreePrefixPath>  Relative path inside the parent repo where the subtree will be added. Cannot be the root path. The path must be empty or non-existent in the parent repo. gmash will deny adding a subtree to a path which already contains any files.
  -r,     --remote <remoteAlias>        Remote alias to add to the parent repo, which will be refered to when pulling and pushing changes to the added subtree.
  -l,     --url <remoteURL>             Remote repository URL of the subtree to add. If not provided, gmash will attempt to find an existing GitHub repo at 'api-user/remote.git'. If no such repo exists and '--new' is passed: a new empty repo will be created at 'api-user/remote.git'.
  -b,     --branch [monoBranch = "main"] 
                                        Target branch of the subtree remote to pull in. Defaults to 'main'.
  -s,     --squash                      Instead of merging the entire history from the subtree project, produce only a single commit that contains all the differences to merge. Then, merge that new commit into the parent repo. Note, if you add a subtree with --squash, future
 pulls and pushes to that subtree should also be squashed.
  -n,     --new                         Create a new github repo for the added subtree, if the target subtree remote does not exist.
  
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
export GMASH_SUBTREE_PATCH_REMOTE=''
export GMASH_SUBTREE_PATCH_BRANCH=''
export GMASH_SUBTREE_PATCH_PREFIX=''
export GMASH_SUBTREE_PATCH_ALL=''
GMASH_SUBTREE_PATCH_ARGR=''
gmash_parser_subtree_patch() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_SUBTREE_PATCH_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--remote' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --remote"
			esac
			case '--branch' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --branch"
			esac
			case '--prefix' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --prefix"
			esac
			case '--all' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --all"
			esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[rbp]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[ahv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_SUBTREE_PATCH_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-r'|'--remote')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_SUBTREE_PATCH_REMOTE="$OPTARG"
				shift ;;
			'-b'|'--branch')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_SUBTREE_PATCH_BRANCH="$OPTARG"
				shift ;;
			'-p'|'--prefix')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_SUBTREE_PATCH_PREFIX="$OPTARG"
				shift ;;
			'-a'|'--all')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				export GMASH_SUBTREE_PATCH_ALL="$OPTARG"
				;;
			'-h'|'--help')
				gmash_subtree_patch_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_SUBTREE_PATCH_VERSION}"
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					GMASH_SUBTREE_PATCH_ARGR="${GMASH_SUBTREE_PATCH_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				GMASH_SUBTREE_PATCH_ARGR="${GMASH_SUBTREE_PATCH_ARGR} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_subtree_patch_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash subtree pull -r [repo] -b [branch]
  
Pull subtree changes to monorepo.
  
Parameters:
  -r,     --remote <subtreeRemote>      Target subtree remote alias.
  -b,     --branch <subtreeBranch>      Target subtree branch.
  -p,     --prefix <subtreePrefixPath>  Subtree prefix path in the monorepo.
  -a,     --all                         Patch all subtrees based on gmash metadata.
  
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
