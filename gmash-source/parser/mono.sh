# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
GMASH_MONO_ARGR=''
gmash_parser_mono() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_MONO_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[hv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_MONO_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-h'|'--help')
				gmash_mono_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_MONO_VERSION}"
				exit 0 ;;
			--)
				while [ $# -gt 0 ]; do
					GMASH_MONO_ARGR="${GMASH_MONO_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				case $1 in 'patch') ;;
					*) set "notcmd" "$1"; break
				esac
				while [ $# -gt 0 ]; do
					GMASH_MONO_ARGR="${GMASH_MONO_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_mono_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash mono <sub-command> [[args]...]
 
Call [main-cmd] [sub-cmd] --help for details of each sub-command.
 
Sub-Commands:
  patch                                 Patch a git repository with changes from another branch.
 
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
export GMASH_MONO_PATCH_BR=''
export GMASH_MONO_PATCH_PATH=''
export GMASH_MONO_PATCH_REMOTE=''
export GMASH_MONO_PATCH_TGTBR=''
export GMASH_MONO_PATCH_TGTUSER=''
export GMASH_MONO_PATCH_TEMPBR=''
export GMASH_MONO_PATCH_TEMPDIR=''
export GMASH_MONO_PATCH_USER=''
export GMASH_MONO_PATCH_URL=''
export GMASH_MONO_PATCH_ALL=''
export GMASH_MONO_PATCH_MAKEPR=''
export GMASH_MONO_PATCH_SQUASH=''
GMASH_MONO_PATCH_ARGR=''
gmash_parser_mono_patch() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_MONO_PATCH_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--br' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --br"
			esac
			case '--path' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --path"
			esac
			case '--remote' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --remote"
			esac
			case '--tgtbr' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --tgtbr"
			esac
			case '--tgtuser' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --tgtuser"
			esac
			case '--tempbr' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --tempbr"
			esac
			case '--tempdir' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --tempdir"
			esac
			case '--user' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --user"
			esac
			case '--url' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --url"
			esac
			case '--all' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --all"
			esac
			case '--make-pr' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --make-pr"
			esac
			case '--squash' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --squash"
			esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[bprBUtTul]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[aPshv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_MONO_PATCH_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-b'|'--br')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_MONO_PATCH_BR="$OPTARG"
				shift ;;
			'-p'|'--path')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_MONO_PATCH_PATH="$OPTARG"
				shift ;;
			'-r'|'--remote')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_MONO_PATCH_REMOTE="$OPTARG"
				shift ;;
			'-B'|'--tgtbr')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_MONO_PATCH_TGTBR="$OPTARG"
				shift ;;
			'-U'|'--tgtuser')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_MONO_PATCH_TGTUSER="$OPTARG"
				shift ;;
			'-t'|'--tempbr')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_MONO_PATCH_TEMPBR="$OPTARG"
				shift ;;
			'-T'|'--tempdir')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_MONO_PATCH_TEMPDIR="$OPTARG"
				shift ;;
			'-u'|'--user')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_MONO_PATCH_USER="$OPTARG"
				shift ;;
			'-l'|'--url')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_MONO_PATCH_URL="$OPTARG"
				shift ;;
			'-a'|'--all')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				export GMASH_MONO_PATCH_ALL="$OPTARG"
				;;
			'-P'|'--make-pr')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				export GMASH_MONO_PATCH_MAKEPR="$OPTARG"
				;;
			'-s'|'--squash')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				export GMASH_MONO_PATCH_SQUASH="$OPTARG"
				;;
			'-h'|'--help')
				gmash_mono_patch_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_MONO_PATCH_VERSION}"
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					GMASH_MONO_PATCH_ARGR="${GMASH_MONO_PATCH_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				GMASH_MONO_PATCH_ARGR="${GMASH_MONO_PATCH_ARGR} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_mono_patch_help() {
cat<<'GETOPTIONSHERE'
Usage: gmash mono patch -r [repo] -b [branch]
  
Patch a git repository with changes from another branch.
  
Parameters:
  -b,     --br <monoBranch>             Source mono branch to pull changes from.
  -p,     --path <prefixPath>           Subtree prefix path in the monorepo.
  -r,     --remote <subtreeRemote>      Target subtree remote alias.
  -B,     --tgtbr <subtreeBranch>       Target subtree remote alias.
  -U,     --tgtuser <subtreeOwner>      Owner of the target subtree repo.
  -t,     --tempbr <tempBranch>         Owner of the target subtree repo.
  -T,     --tempdir <tempPath>          Owner of the target subtree repo.
  -u,     --user <tempPath>             Owner the mono repo. Defaults to current GitHub user.
  -l,     --url <repo>                  Target repository.
  -a,     --all                         Patch all known subtrees in the mono repo.
  -P,     --make-pr                     Make a pull request on GitHub with the patched changes.
  -s,     --squash                      Squash strategy when merging subtree changes. Must be consistent with  the previous pul of the subtree.
  
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display command group version.
GETOPTIONSHERE
}
# Generated by getoptions (END)
