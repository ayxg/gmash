# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
export GMASH_VERBOSE='0'
export GMASH_QUIET='0'
export GMASH_CONFIG='.gmashuser'
GMASH_ARGR=''
gmash_parser_main() {
	OPTIND=$(($#+1))
	while OPTARG= && [ "${GMASH_ARGR}" != x ] && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in (*[!a-zA-Z0-9_-]*) break; esac
			case '--verbose' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --verbose"
			esac
			case '--quiet' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --quiet"
			esac
			case '--config' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --config"
			esac
			case '--help' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --help"
			esac
			case '--version' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --version"
			esac
			case '--versions' in
				"$1") OPTARG=; break ;;
				$1*) OPTARG="$OPTARG --versions"
			esac
			break
		done
		case ${OPTARG# } in
			*\ *)
				eval "set -- $OPTARG $1 $OPTARG"
				OPTIND=$((($#+1)/2)) OPTARG=$1; shift
				while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
				set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
				parser_error "$@" >&2 || exit $?
				echo "$1" >&2
				exit 1 ;;
			?*)
				[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
				shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
			*) shift 2
		esac
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[c]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
				;;
			-[VQhv]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				case $2 in --*) set -- "$1" unknown "$2" && GMASH_ARGR=x; esac;OPTARG= ;;
			+*) unset OPTARG ;;
		esac
		case $1 in
			'-V'|'--verbose')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				export GMASH_VERBOSE="$OPTARG"
				;;
			'-Q'|'--quiet')
				[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
				eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
				export GMASH_QUIET="$OPTARG"
				;;
			'-c'|'--config')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				export GMASH_CONFIG="$OPTARG"
				shift ;;
			'-h'|'--help')
				gmash_main_help
				exit 0 ;;
			'-v'|'--version')
				echo "${GMASH_VERSION}"
				exit 0 ;;
			'--versions')
				gmash_versions_index
				exit 0 ;;
			--)
				while [ $# -gt 0 ]; do
					GMASH_ARGR="${GMASH_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-+]?*) set "unknown" "$1"; break ;;
			*)
				case $1 in 'dirs'|'find'|'gist'|'lineage'|'mono'|'subtree') ;;
					*) set "notcmd" "$1"; break
				esac
				while [ $# -gt 0 ]; do
					GMASH_ARGR="${GMASH_ARGR} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	parser_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
gmash_main_help() {
cat<<'GETOPTIONSHERE'
gmash v0-0-0
AGPL-3.0-or-later Copyright(c) 2025 Anton Yashchenko
Smash keyboard - get git. Bash scripts for high-level git & github repo management.
  
Usage: gmash [[global-args]...] <main-command> <sub-command> [[args]...]
  
Globals:
  -V,     --verbose                     Globally enable verbose output.
  -Q,     --quiet                       Globally disable output. !Warning: some command outputs may be suppressed.
  -c,     --config <gmashConfigFile>    Use a gmash argument config file.
  
Commands:
  dirs                                  High level path/file manipulation and analysis.
    prefix          Add a prefix to each top-level file in a directory.
    same            Get a diff of 2 directories.
    separate        Separate a directory into its constituent parts.
    squash          Squash empty paths in a directory.
  
  find                                  High level file/repo/code searching and analysis.
    duplicate-code  Find duplicate code across files.
    gits            Find git repositories.
    sources         Find source files.
  
  gist                                  Manage GitHub Gists with git-like functionality, integrates with 'mono' && 'subtree'.
    prepare         Sets up a new gist with a title.md page with the same name as the target source file(s).
    create          Push all files in a directory as gists to GitHub. Adds a title.md and readme.md by default.
    clone           Clones a gist to the local filesystem.
    recover         Recover a user's gist(s) from GitHub remotes as git repos.
    upload          Upload files to existing gists.
  
  lineage                               Amalgamate git commits from archived git repos to a more recent version.
  mono                                  Manage Monorepo->Subtree github git remotes and locals.
  subtree                               Manage Subtree->Monorepo github git remotes and locals.
  
Display:
  -h,     --help                        Display gmash, command or subcommand help. Use -h or --help.
  -v,     --version                     [v0-0-0] Display gmash, command or subcommand version.
          --versions                    Display versions of gmash and all commands/subcommands.
  
Development:
    --compile-parser        Compile command line parser source files.
  
GETOPTIONSHERE
}
# Generated by getoptions (END)
